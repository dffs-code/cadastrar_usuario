{"version":3,"sources":["components/Lista/Lista.js","App.js","serviceWorker.js","index.js"],"names":["user","nome","profissao","Lista","state","rows","i","push","key","className","onClick","splice","setState","length","htmlFor","type","placeholder","id","name","document","getElementById","value","alert","userInserted","json","JSON","stringify","blob","Blob","anchor","createElement","download","href","window","webkitURL","URL","createObjectURL","dataset","downloadurl","join","click","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAGMA,G,MAAO,CAAC,CACZC,KAAM,SACNC,UAAW,aAEX,CACAD,KAAM,WACNC,UAAW,iBAIQC,E,4MACjBC,MAAQ,CACJJ,Q,uDAIA,IAFK,IAAD,OACAK,EAAO,GADP,WAEIC,GACND,EAAKE,KACH,wBAAIC,IAAKF,GACP,4BAAK,EAAKF,MAAMJ,KAAKM,GAAGL,MACxB,4BAAK,EAAKG,MAAMJ,KAAKM,GAAGJ,WACxB,4BACE,4BAAQO,UAAU,SAASC,QAAS,WAClCV,EAAKW,OAAQL,EAAE,EAAI,GACnB,EAAKM,SAASZ,KAEd,uBAAGS,UAAU,wBAAb,eAVFH,EAAE,EAAGA,EAAEN,EAAKa,OAAQP,IAAK,EAAzBA,GAgBR,OACE,yBAAKG,UAAU,QACb,yBAAKA,UAAU,SACX,2BAAOK,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOC,YAAY,OAAOC,GAAG,SACzC,2BAAOH,QAAQ,aAAf,iBACA,2BAAOC,KAAK,OAAOC,YAAY,eAAYC,GAAG,cAE9C,4BAAQR,UAAU,+BAA+BM,KAAK,SAASG,KAAK,SAASR,QAAU,WACrF,GAA6C,KAA1CS,SAASC,eAAe,QAAQC,OACY,KAA/CF,SAASC,eAAe,aAAaC,MACnCC,MAAM,gCACH,CACH,IAAMC,EAAe,CACjBtB,KAAMkB,SAASC,eAAe,QAAQC,MACtCnB,UAAWiB,SAASC,eAAe,aAAaC,OAEpDrB,EAAKO,KAAKgB,GACV,EAAKX,SAASZ,GAEdmB,SAASC,eAAe,QAAQC,MAAQ,GACxCF,SAASC,eAAe,aAAaC,MAAQ,MAbjD,YAgBI,uBAAGZ,UAAU,wBAAb,UAIR,yBAAKA,UAAU,mBACb,+BACE,+BACE,4BACE,oCACA,4CACA,4CAGJ,2BAAOA,UAAU,SACdJ,KAIP,4BAAQI,UAAU,sCAAsCM,KAAK,SAASG,KAAK,SAASR,QAAS,WACvF,IAAMc,EAAOC,KAAKC,UAAU1B,EAAM,KAAM,MACpC2B,EAAO,IAAIC,KAAK,CAACJ,GAAO,CAAET,KAAM,oBAChCc,EAASV,SAASW,cAAc,KAEpCD,EAAOE,SAAW,aAClBF,EAAOG,MAAQC,OAAOC,WAAaD,OAAOE,KAAKC,gBAAgBT,GAC/DE,EAAOQ,QAAQC,YAAc,CAAC,aAAcT,EAAOE,SAAUF,EAAOG,MAAMO,KAAK,KAC/EV,EAAOW,UARb,iB,GAhEuBC,aCDpBC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5518ef1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Lista.css'\r\n\r\nconst user = [{\r\n  nome: 'Daniel',\r\n  profissao: 'Estudante'\r\n  },\r\n  {\r\n  nome: 'Jeferson',\r\n  profissao: 'Programador'\r\n  }\r\n]\r\n\r\nexport default class Lista extends Component{\r\n    state = {\r\n        user\r\n      }\r\n    render(){\r\n        let rows = []\r\n        for(let i=0; i<user.length; i++){\r\n          rows.push( \r\n            <tr key={i}>\r\n              <th>{this.state.user[i].nome}</th>\r\n              <th>{this.state.user[i].profissao}</th>\r\n              <th>\r\n                <button className='delete' onClick={()=>{\r\n                  user.splice((i-2), 1)\r\n                  this.setState(user)\r\n                }}>\r\n                  <i className='small material-icons'>delete</i>\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          )\r\n        }\r\n        return (\r\n          <div className='main'>\r\n            <div className='input'>\r\n                <label htmlFor=\"nome\">Nome:</label>\r\n                <input type='text' placeholder='Nome' id='nome'></input>\r\n                <label htmlFor=\"profissao\">Profissão:</label>\r\n                <input type='text' placeholder='Profissão' id='profissao'></input>\r\n\r\n                <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\" onClick= {() => {\r\n                  if(document.getElementById('nome').value === '' ||\r\n                  document.getElementById('profissao').value === ''){\r\n                    alert('Preencha todos os campos')\r\n                  }else{\r\n                    const userInserted = {\r\n                        nome: document.getElementById('nome').value,\r\n                        profissao: document.getElementById('profissao').value\r\n                    }\r\n                    user.push(userInserted);\r\n                    this.setState(user);\r\n\r\n                    document.getElementById('nome').value = ''\r\n                    document.getElementById('profissao').value = ''\r\n                    }\r\n                }}>Cadastrar\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n                \r\n            </div>\r\n            <div className='lista z-depth-2'>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>NOME</th>\r\n                    <th>PROFISSÃO</th>\r\n                    <th>AÇÃO</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className='corpo'>\r\n                  {rows}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <button className='btn waves-effect waves-light export' type='submit' name='action' onClick={() => {\r\n                  const json = JSON.stringify(user, null, '\\t');\r\n                  var blob = new Blob([json], { type: 'application/pdf' });\r\n                  var anchor = document.createElement('a');\r\n                  \r\n                  anchor.download = \"export.txt\";\r\n                  anchor.href = (window.webkitURL || window.URL).createObjectURL(blob);\r\n                  anchor.dataset.downloadurl = ['text/plain', anchor.download, anchor.href].join(':');\r\n                  anchor.click();\r\n                }}>Exportar</button>\r\n          </div>\r\n\r\n      )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Lista from './components/Lista/Lista';\n\nfunction App() {\n  return (\n    <>\n      <Lista />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}